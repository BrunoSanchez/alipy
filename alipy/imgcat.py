import star
import pysex

	

class ImgCat:
	"""
	Represent an individual image and its associated catalog, starlist, quads etc.
	"""

	def __init__(self, file, cat=None):
		"""
		
		:param file: Path to the FITS file, or alternatively just a string to identify the image.
		:type file: string
		
		:param cat: Catalog generated by SExtractor (if available -- if not, we'll make our own)
		:type cat: asciidata catalog
		
		"""
		self.file = file
		self.cat = cat
		self.quads = []
		self.transform = None
		
		self.xlim = (0, 100)
		self.ylim = (0, 100)
	
	def makecat(self, rerun=False):
		self.cat = pysex.run(self.file, params=['X_IMAGE', 'Y_IMAGE', 'FLUX_AUTO', 'FWHM_IMAGE', 'FLAGS', 'ELONGATION', 'NUMBER'], keepcat=True, rerun=rerun, catdir="alipy_cats")

	
	def makestarlist(self):
		if self.cat:
			self.starlist = star.readsexcat(self.cat, verbose=True, maxflag = 2, posflux = True, propfields=[])
		else:
			raise RuntimeError("No cat : call makecat first !")
	
	
	def makequads(self, add=True, **kwargs):
		"""
		:param add: If True, I add the new quads to the existing ones.
		:type add: boolean
		"""
		if not add:
			self.quads = []
		self.quads.extend(makequads(starlist, **kwargs)
		
	
	def showstarlist(self, filename=None):
		try:
			import f2n
		except ImportError:
			print "Couldn't import f2n -- install it !"
			return
		
		myimage = f2n.fromfits(self.file)
		myimage.setzscale("auto", "auto")
		myimage.makepilimage("log", negative = False)
		#myimage.upsample()
		myimage.drawstarlist(self.starlist, r=3)
		myimage.writetitle(os.path.filename(self.file))
		#myimage.writeinfo(["This is a demo", "of some possibilities", "of f2n.py"], colour=(255,100,0))
		myimage.tonet(self.file + ".png")

	
	
	def showquads(self, filename=None):
		pass
		
		
